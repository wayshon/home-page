(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{187:function(t,e,a){"use strict";a.r(e);var s=a(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"栈-堆-全局区-常量区-代码区的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈-堆-全局区-常量区-代码区的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈,堆,全局区,常量区,代码区的区别")]),t._v(" "),a("p",[a("code",[t._v("2016-05-25")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。")])]),t._v(" "),a("li",[a("p",[t._v("堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。（ios中alloc都是存放在堆中）")])]),t._v(" "),a("li",[a("p",[t._v("全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束后有系统释放。注意：全局区又可分为未初始化全局区：.bss段和初始化全局区：data段。")])]),t._v(" "),a("li",[a("p",[t._v("常量区—常量字符串就是放在这里的。 程序结束后由系统释放")])]),t._v(" "),a("li",[a("p",[t._v("代码区—存放函数体的二进制代码。")])])])])}],!1,null,null,null);e.default=i.exports}}]);