(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{205:function(t,e,s){t.exports=s.p+"assets/img/demo1.489a6db8.png"},206:function(t,e,s){t.exports=s.p+"assets/img/demo2.709289fa.png"},207:function(t,e,s){t.exports=s.p+"assets/img/demo3.6a172698.png"},208:function(t,e,s){t.exports=s.p+"assets/img/demo_share.d3e5df74.png"},209:function(t,e,s){t.exports=s.p+"assets/img/demo_scan.e9398a35.png"},246:function(t,e,s){"use strict";s.r(e);var a=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"scan-flutter-ios"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scan-flutter-ios","aria-hidden":"true"}},[this._v("#")]),this._v(" scan_flutter_ios")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"怎么开发一个-flutter-ios-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么开发一个-flutter-ios-插件","aria-hidden":"true"}},[this._v("#")]),this._v(" 怎么开发一个 flutter ios 插件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"创建插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建插件","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建插件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("flutter create -i objc --template=plugin scan_flutter_ios\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("现在看来默认是 swift，想要用 oc 的要加上 "),e("code",[this._v("-i objc")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"编辑-ios-工程代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编辑-ios-工程代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 编辑 iOS 工程代码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("cd scan_flutter_ios/example\nflutter build ios --no-codesign\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("build 会执行 pod install 等事情，执行完之后打开 "),e("code",[this._v("scan_flutter_ios/example/ios")]),this._v(" 下的 Runner.xcworkspace(注意是那个白色的不是蓝色的)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们的插件代码在 Classes 文件夹下，这里其实是个映射，其实就是 "),e("code",[this._v("scan_flutter_ios/ios/Classes")]),this._v("下的文件，两边修改是一样的，只是在xcode里直接修改调试方便一点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(205),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("handleMethodCall 是当 dart 调用 native 的时候执行，如果要 native 调用 dart 的方法或者发广播记得把 channel 对象挪出来给其他地方用。如 native 调 dart："),e("code",[this._v('[channel invokeMethod:@"xx" arguments:@[@(666)]];')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(206),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意点","aria-hidden":"true"}},[this._v("#")]),this._v(" 注意点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在iOS工程里没使用 cocoapods，我目前没找到怎么很好的使用 cocoapods 的方法。因为在我的插件项目里使用的 cocoapods 装包，是能正确跑起来的，但是发布之后，别的项目装了我的包其实是只有 "),e("code",[this._v("ios/Classes")]),this._v(" 目录下的我手写的代码，pods 依赖的库没有装，这让用户自己去 iOS 工程下装 pods 依赖好像也不怎么对。所以我目前是把所有代码都挪到了 classes 下，即使用到的别人的库也是直接源码挪进来，然后手动改各种依赖。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(207),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同上，因为无论是手写的还是导入的文件，我们的 target 都是要设置的 Pods-Runner，如果设置 Flutter 就没这情况了，但这只影响当前的 example，别人安装了还是跑不起来。所以当我们有一些资源比如图片的时候，就不能用 Assets 或者 bundle 文件了，因为不在 Build Phases -> Copy Bundle Resources 里，使用 "),e("code",[this._v("[NSBundle mainBundle] URLForResource")]),this._v(" 读到的将会是 nil。除非要求使用这个库的人自己去在他们的xcode设置里加上，很不现实。所以我现在把扫码框的横条图片放到的线上，先从线上加载图片成 NSData 存本地，以后都从本地取。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"编辑-dart-代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编辑-dart-代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 编辑 dart 代码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("dart 代码在 "),e("code",[this._v("scan_flutter_ios/lib/scan_flutter_ios.dart")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("scan_flutter_ios/example/lib/main.dart")]),this._v(" 里是调用示例，调用 scan_flutter_ios 里的方法就行了")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"发布包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布包","aria-hidden":"true"}},[this._v("#")]),this._v(" 发布包")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一行命令 "),e("code",[this._v("flutter packages pub publish")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo","aria-hidden":"true"}},[this._v("#")]),this._v(" Demo")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(208),alt:"demo_share"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(209),alt:"demo_scan"}})])}],r=s(0),n=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("Android Studio创建或者命令行创建:")]),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),s("p",[t._v("然后打开 Pods -> Development Pods -> scan_flutter_ios -> ..(此处有好几层..) -> example -> ios -> .symlinks -> plugins -> scan_flutter_ios -> ios -> Classes")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("默认会生成 ScanFlutterIosPlugin.h 和 ScanFlutterIosPlugin.m 文件")]),t._v(" "),s("p",[t._v("看 ScanFlutterIosPlugin.m")]),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("registerWithRegistrar 方法不用我们自己调用，里面的 channel 名 scan_flutter_ios 是与 dart 代码里一致的，不要刻意修改。\n本例只用了 FlutterMethodChannel（其他还有MessageChannel和EventChannel），顾名思义调用方法。")]),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("call里面包含了 method 方法名和参数 arguments（id类型，可以认为是NSArray）。")]),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("FlutterResult是回调，执行 FlutterResult 会是 dart 里 Feature 的异步结果。\n图中的 share 方法是唤起 iOS 的原生分享功能，在分享回调里执行 flutter 回调\n图中的 scan 方法是创建native controller 扫码，并且把 FlutterResult 传过去方面扫码成功后回调扫码结果")]),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("dart 与 native channel 通信的值类型是有限制的，具体看官网。明确的是 dart 不能传函数给 native，native 也不能传 block 给 dart，这不像 JSC 的 JSValue 那么自由。")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),s("p",[t._v("上面两个问题由于才疏学浅不知道怎么搞，尤其是 cocoapods 不能用太坑了，直接规避了 iOS 生态一堆三方库，如果有大佬知道怎么玩，求指点。小弟邮箱: wayshon@qq.com")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),s("p",[t._v("主要是创建 channel，这里创建 channel 的字符串一定是要与native里面统一的，不要乱改。")]),t._v(" "),s("p",[t._v("定义一些调用 native 的方法，可以是 Feature，方便 await 等 native 调用 FlutterResult 返回。")]),t._v(" "),s("p",[t._v("_channel.invokeMethod 是调用 native 方法，_channel.setMethodCallHandler是可以注册被 native 调的方法")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("复制命令行的url去浏览器登录 google")]),t._v(" "),s("p",[t._v("注意即使自己电脑有 socks 也要给终端设置一下，不然看看网页可以，终端还是没法接收到 google 的回调。参考文章 "),s("a",{attrs:{href:"http://www.hzy2m.com/2019/04/12/Mac-os-%E9%85%8D%E7%BD%AEIterm2%E4%BB%A3%E7%90%86/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mac os配置Iterm2代理"),s("OutboundLink")],1)]),t._v(" "),t._m(21),t._v(" "),s("p",[t._v("使用扫码功能记得 xcode plist 加上相机相册的权限，Privacy - Camera Usage Description, Privacy - Photo Library Usage Description")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://pub.dev/packages/scan_flutter_ios",target:"_blank",rel:"noopener noreferrer"}},[t._v("插件 pub 地址"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/wayshon/scan_flutter_ios",target:"_blank",rel:"noopener noreferrer"}},[t._v("github 地址"),s("OutboundLink")],1)]),t._v(" "),t._m(22),t._v(" "),t._m(23)])},a,!1,null,null,null);e.default=n.exports}}]);