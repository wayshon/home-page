(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{177:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),e("p",[t._v("借鉴知乎这篇好文："),e("a",{attrs:{href:"https://www.zhihu.com/question/36972010/answer/71338002",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zhihu.com/question/36972010/answer/71338002"),e("OutboundLink")],1)]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"js-event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-event-loop","aria-hidden":"true"}},[this._v("#")]),this._v(" js event-loop")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("2017-08-15")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-loop","aria-hidden":"true"}},[this._v("#")]),this._v(" event-loop")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("所有同步任务在主线程执行栈执行")]),t._v(" "),e("li",[t._v("主线程之外有一个任务队列(事件/消息队列)，异步任务有了结果就会在任务队列中添加一个事件，表示异步任务可以进入执行栈了。只要指定过回调函数，事件发生时就会进入任务队列，等待主线程读取。任务队列是先进先出的队列，")]),t._v(" "),e("li",[t._v('主线程中所有同步任务执行完之后会，读取任务队列，异步任务进入执行。由于存在"定时器"，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。')]),t._v(" "),e("li",[t._v("问题：主线程空的时候查看队列，如果主线程一直不空队里里的异步操作就一直延后吗？\n"),e("ul",[e("li",[t._v('答：执行栈中的代码（同步任务），总是在读取"任务队列"（异步任务）之前执行。')])])]),t._v(" "),e("li",[t._v('定时器：setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在"任务队列"的尾部添加一个事件，因此要等到同步任务和"任务队列"现有的事件都处理完，才会得到执行。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"node-event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-event-loop","aria-hidden":"true"}},[this._v("#")]),this._v(" node-event-loop")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v('process.nextTick方法可以在当前"执行栈"的尾部----下一次Event Loop（主线程读取"任务队列"）之前----触发回调函数。')]),this._v(" "),s("li",[this._v('etImmediate方法则是在当前"任务队列"的尾部添加事件，类似setTimeout(f,0)。setTimeout优先级比setImmediate高。')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"补充："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充：","aria-hidden":"true"}},[this._v("#")]),this._v(" 补充：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("后来发现，原来任务队列不止一个，而是有宏任务与微任务之分。如下，我原本以为setTimeout先进队列，promise后进，所以是13524，然而，结果是promise先于setTimeout执行。")]),t._v(" "),e("li",[t._v("所以正确的流程是:\n"),e("ul",[e("li",[t._v("浏览器先执行宏任务，即同步代码")]),t._v(" "),e("li",[t._v("遇到setTimeout就塞进下一次事件循环的宏任务")]),t._v(" "),e("li",[t._v("宏任务执行完之后去微任务队列捞，有任务就执行")]),t._v(" "),e("li",[t._v("进行下一次事件循环")])])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"原因："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因：","aria-hidden":"true"}},[this._v("#")]),this._v(" 原因：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("有一个事件循环，但是任务队列可以有多个。")]),t._v(" "),e("li",[t._v("整个script代码，放在了macrotask queue中，setTimeout也放入macrotask queue。")]),t._v(" "),e("li",[t._v("但是，promise.then放到了另一个任务队列microtask queue中。")]),t._v(" "),e("li",[t._v("这两个任务队列执行顺序如下，取1个macrotask queue中的task，执行之。")]),t._v(" "),e("li",[t._v("然后把所有microtask queue顺序执行完，再取macrotask queue中的下一个任务。")]),t._v(" "),e("li",[t._v("代码开始执行时，所有这些代码在macrotask queue中，取出来执行之。")]),t._v(" "),e("li",[t._v("后面遇到了setTimeout，又加入到macrotask queue中，")]),t._v(" "),e("li",[t._v("然后，遇到了promise.then，放入到了另一个队列microtask queue。")]),t._v(" "),e("li",[t._v("等整个execution context stack执行完后，")]),t._v(" "),e("li",[t._v("下一步该取的是microtask queue中的任务了。")]),t._v(" "),e("li",[t._v("因此，看起来promise.then的回调比setTimeout先执行。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"其他补充："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他补充：","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他补充：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("一个浏览器环境（unit of related similar-origin browsing contexts.）只能有一个事件循环（Event loop），而一个事件循环可以多个任务队列（Task queue），每个任务都有一个任务源（Task source）。")]),t._v(" "),e("li",[t._v("相同任务源的任务，只能放到一个任务队列中。")]),t._v(" "),e("li",[t._v("不同任务源的任务，可以放到不同任务队列中。（同一个任务队列，能否容纳不同任务源的任务，没说）")]),t._v(" "),e("li",[t._v("客户端可能实现了一个包含鼠标键盘事件的任务队列，还有其他的任务队列，而给鼠标键盘事件的任务队列更高优先级，例如75%的可能性执行它。这样就能保证流畅的交互性，而且别的任务也能执行到了。但是，同一个任务队列中的任务必须按先进先出的顺序执行。")]),t._v(" "),e("li",[t._v("单独的任务队列中的任务总是按先进先出的顺序执行，但是不保证多个任务队列中的任务优先级，具体实现可能会交叉执行。")])])}],!1,null,null,null);s.default=n.exports}}]);